1.node
	- 通过node可以直接将js代码在服务器中执行
	- 我们可以通过js来编写web服务器的代码
	- node中使用的js引擎是谷歌的v8引擎
	- node的特点：
		1.非阻塞、异步的I/O
		2.单线程（主线程单线程，后台I/O线程池）
		3.跨平台
		
	- 模块化（module）
		- 模块化将一个完整的项目分割成了一个一个小的部分，这每一个部分就是一个模块，
			通过模块化降低程序之间的耦合，方便后期维护，增加代码的可复用性。
		- 原生ES没有模块化标准的，在Node中通过CommonJS来对其进行模块化，在前端有AMD、CMD、ES6的模块化来提供支持。
		- CommonJS规范将模块化分成了三个部分：
			1.模块的定义
				- 在node中一个js文件就是一个模块，
					在模块中编写的代码都是运行在一个独立的函数中的，
					所以模块中的变量和函数都是局部变量和函数，对于外部是不可见的，
					可以通过exports对象向外部暴露内容。
				- 导出属性：
					exports.属性名 = 属性值;
					module.exports.属性名 = 属性值;
					module.exports = {
						属性名:属性值
					};
					
			2.模块的标识
				- 通过模块的标识来识别出不同的模块，
					对于文件模块（自定义模块），标识就是文件的路径，文件的路径可以是绝对路径
						也可以是以./或../开头的相对路径.
					对于其他的模块，标识就是文件的名字。	
					
			3.模块的引用
				- 使用require()函数来引用外部模块
				- 函数中需要一个文件的标识作为参数，它会自动引入指定的模块，并返回一个代表模块的对象，
					该对象中保存着模块所有向外暴露的内容
				- 例子：
					var hello = require("./hello");
					var fs = require("fs");
					
					
	- npm(node package manager)
		- node的包管理器
		- 通过npm可以对node的包进行下载安装、上传、删除、修改等操作
		- npm会在安装node时，自动安装，不需要单独去安装
		- npm的常用的指令
			npm -v
				- 查看npm的版本
			npm init
				- 创建一个package.json
			npm search/s 关键字
				- 搜索指定的包
			npm install/i 包名
				- 下载安装指定的包
			npm i 包名 --save
				- 下载包并添加依赖
			npm i 包名 -g
				- 全局安装包，一般装的都是一些工具
			npm remove/r 包名
				- 删除指定的包
				
				
				
				
		
		