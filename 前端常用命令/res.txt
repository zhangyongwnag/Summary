1.response
	- res 是服务器发送给客户端的响应报文，通过res可以向客户端响应内容
	- res 是路由或中间件的回调函数中的第二个参数
	- res的方法：
		res.status()
			- 设置响应状态码
		res.sendStatus()
			- 设置并发送响应状态码
		res.set(header , value);
			- 设置响应头
		res.get(header)
			- 获取响应头
		res.send(body)
			- 设置响应体并发送响应报文
		res.sendFile()
			- 使用一个文件作为响应内容发送给客户端，
				如果客户端支持该格式的文件则会自动打开，如果客户端不支持会弹出下载提示
		res.download()
			- 发送一个文件作为响应，提供给客户端用于下载
		res.render("",{})
			- 渲染模板，并将渲染的结果作为响应发送给客户端
		res.redirect()
			- 发起请求的重定向
			
2.中间件 Middleware
	- 中间件和路由基本一致，不同的是中间件默认可以处理多个请求地址,
		通过中间件可以在请求到达路由前，做一些准备工作，比如：静态资源解析、解析请求体、解析Cookie、提供Session
		
	- 通过中间件可以对Express的功能进行扩展，增强	
	
	- 中间件的设置：
		app.use(路径,回调函数);
		
	- 静态资源的中间件
		app.use(express.static("public"));
		
	- 解析请求体的中间件（body-parser）
		1.下载安装body-parser
			- npm i body-parser --save
			
		2.引入body-parser	
			var bodyParser = require("body-parser");
			
		3.设置为中间件
			app.use(bodyParser.urlencoded({extended:false}));
			app.use(bodyParser.json());
			
3.路由
	- 可以为同一个地址映射多个路由，这样当该地址被访问时，路由会依次被触发
		前边的路由可以决定后边的路由是否执行。
		
	- 例子：
		app.get("/hello",function(req , res , next){});
		app.get("/hello",function(req , res , next){});
		app.get("/hello",function(req , res , next){});
		
		app.get("/hello",function(req , res , next){},function(req , res , next){},function(req , res , next){})
		
	- 除了可以将路由绑定到app对象上，也可以创建一个router对象，并将路由绑定到该对象上，
		再以中间件的形式将router对象设置到app上
		
	- 例子：
		var router = express.Router();
		
		router.get(...);
		router.post(...);
		router.all(...);
		router.use(...);
		
		app.use(router);
		
4.模板引擎
	- 通过模板引擎可以为我们提供一个带有变量的HTML网页模板，
		这些模板可以在服务器端被渲染，并且服务器可以将渲染后的最终结果返回给客户端。
	- 这样我们就可以在服务器中快速的生成动态的页面。
	- 使用EJS来作为模板引擎：
		1.下载安装ejs
			npm i ejs --save
		2.对模板引擎进行配置
			app.set("view engine" , "ejs");
		3.设置模板存放的目录
			app.set("views","./views");
		4.使用res来对模板进行渲染
			res.render("hello.ejs",{username:"xxxx"})
			
	- EJS的语法：
		<%= %> EJS表达式，将一个变量直接输出到页面中(会自动对特殊字符进行转义)
		<%- %> EJS表达式，将一个变量直接输出到页面中(不会自动转义)
		<%  %> EJS脚本片段，在脚本片段可以直接编写JS代码，在一个页面中可以有多个脚本片段，
				但是多个脚本片段要确保结构完整
				
	- EJS传递变量的方式：
		1.可以将变量作为render()方法的第二个参数传递
		2.可以将变量设置为res.locals的属性
			- 这两种方式的作用范围就是一次请求，参数只在当前请求中生效，一旦发送第二次请求参数自动丢失
		
		3.可以将变量设置为app.locals的属性
			- 它的作用返回是当前web应用，只要设置上会一直有效
			
		- 如果三个位置都有相同的变量，则显示的优先级是 render  > res.locals > app.locals	
		
	
		
		
		
		
		
		
				